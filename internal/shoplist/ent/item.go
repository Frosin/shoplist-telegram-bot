// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/Frosin/shoplist-telegram-bot/internal/shoplist/ent/item"
	"github.com/Frosin/shoplist-telegram-bot/internal/shoplist/ent/shopping"
)

// Item is the model entity for the Item schema.
type Item struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// ProductName holds the value of the "product_name" field.
	ProductName string `json:"product_name,omitempty"`
	// Quantity holds the value of the "quantity" field.
	Quantity int `json:"quantity,omitempty"`
	// CategoryID holds the value of the "category_id" field.
	CategoryID int `json:"category_id,omitempty"`
	// Complete holds the value of the "complete" field.
	Complete bool `json:"complete,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ItemQuery when eager-loading is set.
	Edges         ItemEdges `json:"edges"`
	shopping_item *int
}

// ItemEdges holds the relations/edges for other nodes in the graph.
type ItemEdges struct {
	// Shopping holds the value of the shopping edge.
	Shopping *Shopping `json:"shopping,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ShoppingOrErr returns the Shopping value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ItemEdges) ShoppingOrErr() (*Shopping, error) {
	if e.loadedTypes[0] {
		if e.Shopping == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: shopping.Label}
		}
		return e.Shopping, nil
	}
	return nil, &NotLoadedError{edge: "shopping"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Item) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case item.FieldComplete:
			values[i] = new(sql.NullBool)
		case item.FieldID, item.FieldQuantity, item.FieldCategoryID:
			values[i] = new(sql.NullInt64)
		case item.FieldProductName:
			values[i] = new(sql.NullString)
		case item.ForeignKeys[0]: // shopping_item
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Item", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Item fields.
func (i *Item) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for j := range columns {
		switch columns[j] {
		case item.FieldID:
			value, ok := values[j].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			i.ID = int(value.Int64)
		case item.FieldProductName:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field product_name", values[j])
			} else if value.Valid {
				i.ProductName = value.String
			}
		case item.FieldQuantity:
			if value, ok := values[j].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field quantity", values[j])
			} else if value.Valid {
				i.Quantity = int(value.Int64)
			}
		case item.FieldCategoryID:
			if value, ok := values[j].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field category_id", values[j])
			} else if value.Valid {
				i.CategoryID = int(value.Int64)
			}
		case item.FieldComplete:
			if value, ok := values[j].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field complete", values[j])
			} else if value.Valid {
				i.Complete = value.Bool
			}
		case item.ForeignKeys[0]:
			if value, ok := values[j].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field shopping_item", value)
			} else if value.Valid {
				i.shopping_item = new(int)
				*i.shopping_item = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryShopping queries the "shopping" edge of the Item entity.
func (i *Item) QueryShopping() *ShoppingQuery {
	return (&ItemClient{config: i.config}).QueryShopping(i)
}

// Update returns a builder for updating this Item.
// Note that you need to call Item.Unwrap() before calling this method if this Item
// was returned from a transaction, and the transaction was committed or rolled back.
func (i *Item) Update() *ItemUpdateOne {
	return (&ItemClient{config: i.config}).UpdateOne(i)
}

// Unwrap unwraps the Item entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (i *Item) Unwrap() *Item {
	_tx, ok := i.config.driver.(*txDriver)
	if !ok {
		panic("ent: Item is not a transactional entity")
	}
	i.config.driver = _tx.drv
	return i
}

// String implements the fmt.Stringer.
func (i *Item) String() string {
	var builder strings.Builder
	builder.WriteString("Item(")
	builder.WriteString(fmt.Sprintf("id=%v, ", i.ID))
	builder.WriteString("product_name=")
	builder.WriteString(i.ProductName)
	builder.WriteString(", ")
	builder.WriteString("quantity=")
	builder.WriteString(fmt.Sprintf("%v", i.Quantity))
	builder.WriteString(", ")
	builder.WriteString("category_id=")
	builder.WriteString(fmt.Sprintf("%v", i.CategoryID))
	builder.WriteString(", ")
	builder.WriteString("complete=")
	builder.WriteString(fmt.Sprintf("%v", i.Complete))
	builder.WriteByte(')')
	return builder.String()
}

// Items is a parsable slice of Item.
type Items []*Item

func (i Items) config(cfg config) {
	for _i := range i {
		i[_i].config = cfg
	}
}
