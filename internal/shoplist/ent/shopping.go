// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/Frosin/shoplist-telegram-bot/internal/shoplist/ent/shop"
	"github.com/Frosin/shoplist-telegram-bot/internal/shoplist/ent/shopping"
	"github.com/Frosin/shoplist-telegram-bot/internal/shoplist/ent/user"
)

// Shopping is the model entity for the Shopping schema.
type Shopping struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Date holds the value of the "date" field.
	Date time.Time `json:"date,omitempty"`
	// Sum holds the value of the "sum" field.
	Sum int `json:"sum,omitempty"`
	// Complete holds the value of the "complete" field.
	Complete bool `json:"complete,omitempty"`
	// Type holds the value of the "type" field.
	Type int `json:"type,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ShoppingQuery when eager-loading is set.
	Edges         ShoppingEdges `json:"edges"`
	shop_shopping *int
	user_shopping *int
}

// ShoppingEdges holds the relations/edges for other nodes in the graph.
type ShoppingEdges struct {
	// Item holds the value of the item edge.
	Item []*Item `json:"item,omitempty"`
	// Shop holds the value of the shop edge.
	Shop *Shop `json:"shop,omitempty"`
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// ItemOrErr returns the Item value or an error if the edge
// was not loaded in eager-loading.
func (e ShoppingEdges) ItemOrErr() ([]*Item, error) {
	if e.loadedTypes[0] {
		return e.Item, nil
	}
	return nil, &NotLoadedError{edge: "item"}
}

// ShopOrErr returns the Shop value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ShoppingEdges) ShopOrErr() (*Shop, error) {
	if e.loadedTypes[1] {
		if e.Shop == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: shop.Label}
		}
		return e.Shop, nil
	}
	return nil, &NotLoadedError{edge: "shop"}
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ShoppingEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[2] {
		if e.User == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Shopping) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case shopping.FieldComplete:
			values[i] = new(sql.NullBool)
		case shopping.FieldID, shopping.FieldSum, shopping.FieldType:
			values[i] = new(sql.NullInt64)
		case shopping.FieldDate:
			values[i] = new(sql.NullTime)
		case shopping.ForeignKeys[0]: // shop_shopping
			values[i] = new(sql.NullInt64)
		case shopping.ForeignKeys[1]: // user_shopping
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Shopping", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Shopping fields.
func (s *Shopping) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case shopping.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			s.ID = int(value.Int64)
		case shopping.FieldDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field date", values[i])
			} else if value.Valid {
				s.Date = value.Time
			}
		case shopping.FieldSum:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field sum", values[i])
			} else if value.Valid {
				s.Sum = int(value.Int64)
			}
		case shopping.FieldComplete:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field complete", values[i])
			} else if value.Valid {
				s.Complete = value.Bool
			}
		case shopping.FieldType:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				s.Type = int(value.Int64)
			}
		case shopping.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field shop_shopping", value)
			} else if value.Valid {
				s.shop_shopping = new(int)
				*s.shop_shopping = int(value.Int64)
			}
		case shopping.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_shopping", value)
			} else if value.Valid {
				s.user_shopping = new(int)
				*s.user_shopping = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryItem queries the "item" edge of the Shopping entity.
func (s *Shopping) QueryItem() *ItemQuery {
	return (&ShoppingClient{config: s.config}).QueryItem(s)
}

// QueryShop queries the "shop" edge of the Shopping entity.
func (s *Shopping) QueryShop() *ShopQuery {
	return (&ShoppingClient{config: s.config}).QueryShop(s)
}

// QueryUser queries the "user" edge of the Shopping entity.
func (s *Shopping) QueryUser() *UserQuery {
	return (&ShoppingClient{config: s.config}).QueryUser(s)
}

// Update returns a builder for updating this Shopping.
// Note that you need to call Shopping.Unwrap() before calling this method if this Shopping
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Shopping) Update() *ShoppingUpdateOne {
	return (&ShoppingClient{config: s.config}).UpdateOne(s)
}

// Unwrap unwraps the Shopping entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (s *Shopping) Unwrap() *Shopping {
	_tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("ent: Shopping is not a transactional entity")
	}
	s.config.driver = _tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Shopping) String() string {
	var builder strings.Builder
	builder.WriteString("Shopping(")
	builder.WriteString(fmt.Sprintf("id=%v, ", s.ID))
	builder.WriteString("date=")
	builder.WriteString(s.Date.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("sum=")
	builder.WriteString(fmt.Sprintf("%v", s.Sum))
	builder.WriteString(", ")
	builder.WriteString("complete=")
	builder.WriteString(fmt.Sprintf("%v", s.Complete))
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(fmt.Sprintf("%v", s.Type))
	builder.WriteByte(')')
	return builder.String()
}

// Shoppings is a parsable slice of Shopping.
type Shoppings []*Shopping

func (s Shoppings) config(cfg config) {
	for _i := range s {
		s[_i].config = cfg
	}
}
