// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"github.com/Frosin/shoplist-telegram-bot/internal/shoplist/ent/item"
	"github.com/Frosin/shoplist-telegram-bot/internal/shoplist/ent/predicate"
	"github.com/Frosin/shoplist-telegram-bot/internal/shoplist/ent/shop"
	"github.com/Frosin/shoplist-telegram-bot/internal/shoplist/ent/shopping"
	"github.com/Frosin/shoplist-telegram-bot/internal/shoplist/ent/user"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeItem     = "Item"
	TypeShop     = "Shop"
	TypeShopping = "Shopping"
	TypeUser     = "User"
)

// ItemMutation represents an operation that mutates the Item nodes in the graph.
type ItemMutation struct {
	config
	op              Op
	typ             string
	id              *int
	product_name    *string
	quantity        *int
	addquantity     *int
	category_id     *int
	addcategory_id  *int
	complete        *bool
	clearedFields   map[string]struct{}
	shopping        *int
	clearedshopping bool
	done            bool
	oldValue        func(context.Context) (*Item, error)
	predicates      []predicate.Item
}

var _ ent.Mutation = (*ItemMutation)(nil)

// itemOption allows management of the mutation configuration using functional options.
type itemOption func(*ItemMutation)

// newItemMutation creates new mutation for the Item entity.
func newItemMutation(c config, op Op, opts ...itemOption) *ItemMutation {
	m := &ItemMutation{
		config:        c,
		op:            op,
		typ:           TypeItem,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withItemID sets the ID field of the mutation.
func withItemID(id int) itemOption {
	return func(m *ItemMutation) {
		var (
			err   error
			once  sync.Once
			value *Item
		)
		m.oldValue = func(ctx context.Context) (*Item, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Item.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withItem sets the old Item of the mutation.
func withItem(node *Item) itemOption {
	return func(m *ItemMutation) {
		m.oldValue = func(context.Context) (*Item, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ItemMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ItemMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ItemMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ItemMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Item.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetProductName sets the "product_name" field.
func (m *ItemMutation) SetProductName(s string) {
	m.product_name = &s
}

// ProductName returns the value of the "product_name" field in the mutation.
func (m *ItemMutation) ProductName() (r string, exists bool) {
	v := m.product_name
	if v == nil {
		return
	}
	return *v, true
}

// OldProductName returns the old "product_name" field's value of the Item entity.
// If the Item object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ItemMutation) OldProductName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldProductName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldProductName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldProductName: %w", err)
	}
	return oldValue.ProductName, nil
}

// ResetProductName resets all changes to the "product_name" field.
func (m *ItemMutation) ResetProductName() {
	m.product_name = nil
}

// SetQuantity sets the "quantity" field.
func (m *ItemMutation) SetQuantity(i int) {
	m.quantity = &i
	m.addquantity = nil
}

// Quantity returns the value of the "quantity" field in the mutation.
func (m *ItemMutation) Quantity() (r int, exists bool) {
	v := m.quantity
	if v == nil {
		return
	}
	return *v, true
}

// OldQuantity returns the old "quantity" field's value of the Item entity.
// If the Item object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ItemMutation) OldQuantity(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldQuantity is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldQuantity requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldQuantity: %w", err)
	}
	return oldValue.Quantity, nil
}

// AddQuantity adds i to the "quantity" field.
func (m *ItemMutation) AddQuantity(i int) {
	if m.addquantity != nil {
		*m.addquantity += i
	} else {
		m.addquantity = &i
	}
}

// AddedQuantity returns the value that was added to the "quantity" field in this mutation.
func (m *ItemMutation) AddedQuantity() (r int, exists bool) {
	v := m.addquantity
	if v == nil {
		return
	}
	return *v, true
}

// ResetQuantity resets all changes to the "quantity" field.
func (m *ItemMutation) ResetQuantity() {
	m.quantity = nil
	m.addquantity = nil
}

// SetCategoryID sets the "category_id" field.
func (m *ItemMutation) SetCategoryID(i int) {
	m.category_id = &i
	m.addcategory_id = nil
}

// CategoryID returns the value of the "category_id" field in the mutation.
func (m *ItemMutation) CategoryID() (r int, exists bool) {
	v := m.category_id
	if v == nil {
		return
	}
	return *v, true
}

// OldCategoryID returns the old "category_id" field's value of the Item entity.
// If the Item object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ItemMutation) OldCategoryID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCategoryID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCategoryID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCategoryID: %w", err)
	}
	return oldValue.CategoryID, nil
}

// AddCategoryID adds i to the "category_id" field.
func (m *ItemMutation) AddCategoryID(i int) {
	if m.addcategory_id != nil {
		*m.addcategory_id += i
	} else {
		m.addcategory_id = &i
	}
}

// AddedCategoryID returns the value that was added to the "category_id" field in this mutation.
func (m *ItemMutation) AddedCategoryID() (r int, exists bool) {
	v := m.addcategory_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetCategoryID resets all changes to the "category_id" field.
func (m *ItemMutation) ResetCategoryID() {
	m.category_id = nil
	m.addcategory_id = nil
}

// SetComplete sets the "complete" field.
func (m *ItemMutation) SetComplete(b bool) {
	m.complete = &b
}

// Complete returns the value of the "complete" field in the mutation.
func (m *ItemMutation) Complete() (r bool, exists bool) {
	v := m.complete
	if v == nil {
		return
	}
	return *v, true
}

// OldComplete returns the old "complete" field's value of the Item entity.
// If the Item object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ItemMutation) OldComplete(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldComplete is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldComplete requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldComplete: %w", err)
	}
	return oldValue.Complete, nil
}

// ResetComplete resets all changes to the "complete" field.
func (m *ItemMutation) ResetComplete() {
	m.complete = nil
}

// SetShoppingID sets the "shopping" edge to the Shopping entity by id.
func (m *ItemMutation) SetShoppingID(id int) {
	m.shopping = &id
}

// ClearShopping clears the "shopping" edge to the Shopping entity.
func (m *ItemMutation) ClearShopping() {
	m.clearedshopping = true
}

// ShoppingCleared reports if the "shopping" edge to the Shopping entity was cleared.
func (m *ItemMutation) ShoppingCleared() bool {
	return m.clearedshopping
}

// ShoppingID returns the "shopping" edge ID in the mutation.
func (m *ItemMutation) ShoppingID() (id int, exists bool) {
	if m.shopping != nil {
		return *m.shopping, true
	}
	return
}

// ShoppingIDs returns the "shopping" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ShoppingID instead. It exists only for internal usage by the builders.
func (m *ItemMutation) ShoppingIDs() (ids []int) {
	if id := m.shopping; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetShopping resets all changes to the "shopping" edge.
func (m *ItemMutation) ResetShopping() {
	m.shopping = nil
	m.clearedshopping = false
}

// Where appends a list predicates to the ItemMutation builder.
func (m *ItemMutation) Where(ps ...predicate.Item) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *ItemMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Item).
func (m *ItemMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ItemMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.product_name != nil {
		fields = append(fields, item.FieldProductName)
	}
	if m.quantity != nil {
		fields = append(fields, item.FieldQuantity)
	}
	if m.category_id != nil {
		fields = append(fields, item.FieldCategoryID)
	}
	if m.complete != nil {
		fields = append(fields, item.FieldComplete)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ItemMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case item.FieldProductName:
		return m.ProductName()
	case item.FieldQuantity:
		return m.Quantity()
	case item.FieldCategoryID:
		return m.CategoryID()
	case item.FieldComplete:
		return m.Complete()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ItemMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case item.FieldProductName:
		return m.OldProductName(ctx)
	case item.FieldQuantity:
		return m.OldQuantity(ctx)
	case item.FieldCategoryID:
		return m.OldCategoryID(ctx)
	case item.FieldComplete:
		return m.OldComplete(ctx)
	}
	return nil, fmt.Errorf("unknown Item field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ItemMutation) SetField(name string, value ent.Value) error {
	switch name {
	case item.FieldProductName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetProductName(v)
		return nil
	case item.FieldQuantity:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetQuantity(v)
		return nil
	case item.FieldCategoryID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCategoryID(v)
		return nil
	case item.FieldComplete:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetComplete(v)
		return nil
	}
	return fmt.Errorf("unknown Item field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ItemMutation) AddedFields() []string {
	var fields []string
	if m.addquantity != nil {
		fields = append(fields, item.FieldQuantity)
	}
	if m.addcategory_id != nil {
		fields = append(fields, item.FieldCategoryID)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ItemMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case item.FieldQuantity:
		return m.AddedQuantity()
	case item.FieldCategoryID:
		return m.AddedCategoryID()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ItemMutation) AddField(name string, value ent.Value) error {
	switch name {
	case item.FieldQuantity:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddQuantity(v)
		return nil
	case item.FieldCategoryID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCategoryID(v)
		return nil
	}
	return fmt.Errorf("unknown Item numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ItemMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ItemMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ItemMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Item nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ItemMutation) ResetField(name string) error {
	switch name {
	case item.FieldProductName:
		m.ResetProductName()
		return nil
	case item.FieldQuantity:
		m.ResetQuantity()
		return nil
	case item.FieldCategoryID:
		m.ResetCategoryID()
		return nil
	case item.FieldComplete:
		m.ResetComplete()
		return nil
	}
	return fmt.Errorf("unknown Item field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ItemMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.shopping != nil {
		edges = append(edges, item.EdgeShopping)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ItemMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case item.EdgeShopping:
		if id := m.shopping; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ItemMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ItemMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ItemMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedshopping {
		edges = append(edges, item.EdgeShopping)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ItemMutation) EdgeCleared(name string) bool {
	switch name {
	case item.EdgeShopping:
		return m.clearedshopping
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ItemMutation) ClearEdge(name string) error {
	switch name {
	case item.EdgeShopping:
		m.ClearShopping()
		return nil
	}
	return fmt.Errorf("unknown Item unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ItemMutation) ResetEdge(name string) error {
	switch name {
	case item.EdgeShopping:
		m.ResetShopping()
		return nil
	}
	return fmt.Errorf("unknown Item edge %s", name)
}

// ShopMutation represents an operation that mutates the Shop nodes in the graph.
type ShopMutation struct {
	config
	op              Op
	typ             string
	id              *int
	name            *string
	clearedFields   map[string]struct{}
	shopping        map[int]struct{}
	removedshopping map[int]struct{}
	clearedshopping bool
	done            bool
	oldValue        func(context.Context) (*Shop, error)
	predicates      []predicate.Shop
}

var _ ent.Mutation = (*ShopMutation)(nil)

// shopOption allows management of the mutation configuration using functional options.
type shopOption func(*ShopMutation)

// newShopMutation creates new mutation for the Shop entity.
func newShopMutation(c config, op Op, opts ...shopOption) *ShopMutation {
	m := &ShopMutation{
		config:        c,
		op:            op,
		typ:           TypeShop,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withShopID sets the ID field of the mutation.
func withShopID(id int) shopOption {
	return func(m *ShopMutation) {
		var (
			err   error
			once  sync.Once
			value *Shop
		)
		m.oldValue = func(ctx context.Context) (*Shop, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Shop.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withShop sets the old Shop of the mutation.
func withShop(node *Shop) shopOption {
	return func(m *ShopMutation) {
		m.oldValue = func(context.Context) (*Shop, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ShopMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ShopMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ShopMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ShopMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Shop.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *ShopMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *ShopMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Shop entity.
// If the Shop object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ShopMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *ShopMutation) ResetName() {
	m.name = nil
}

// AddShoppingIDs adds the "shopping" edge to the Shopping entity by ids.
func (m *ShopMutation) AddShoppingIDs(ids ...int) {
	if m.shopping == nil {
		m.shopping = make(map[int]struct{})
	}
	for i := range ids {
		m.shopping[ids[i]] = struct{}{}
	}
}

// ClearShopping clears the "shopping" edge to the Shopping entity.
func (m *ShopMutation) ClearShopping() {
	m.clearedshopping = true
}

// ShoppingCleared reports if the "shopping" edge to the Shopping entity was cleared.
func (m *ShopMutation) ShoppingCleared() bool {
	return m.clearedshopping
}

// RemoveShoppingIDs removes the "shopping" edge to the Shopping entity by IDs.
func (m *ShopMutation) RemoveShoppingIDs(ids ...int) {
	if m.removedshopping == nil {
		m.removedshopping = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.shopping, ids[i])
		m.removedshopping[ids[i]] = struct{}{}
	}
}

// RemovedShopping returns the removed IDs of the "shopping" edge to the Shopping entity.
func (m *ShopMutation) RemovedShoppingIDs() (ids []int) {
	for id := range m.removedshopping {
		ids = append(ids, id)
	}
	return
}

// ShoppingIDs returns the "shopping" edge IDs in the mutation.
func (m *ShopMutation) ShoppingIDs() (ids []int) {
	for id := range m.shopping {
		ids = append(ids, id)
	}
	return
}

// ResetShopping resets all changes to the "shopping" edge.
func (m *ShopMutation) ResetShopping() {
	m.shopping = nil
	m.clearedshopping = false
	m.removedshopping = nil
}

// Where appends a list predicates to the ShopMutation builder.
func (m *ShopMutation) Where(ps ...predicate.Shop) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *ShopMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Shop).
func (m *ShopMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ShopMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.name != nil {
		fields = append(fields, shop.FieldName)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ShopMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case shop.FieldName:
		return m.Name()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ShopMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case shop.FieldName:
		return m.OldName(ctx)
	}
	return nil, fmt.Errorf("unknown Shop field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ShopMutation) SetField(name string, value ent.Value) error {
	switch name {
	case shop.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	}
	return fmt.Errorf("unknown Shop field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ShopMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ShopMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ShopMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Shop numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ShopMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ShopMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ShopMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Shop nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ShopMutation) ResetField(name string) error {
	switch name {
	case shop.FieldName:
		m.ResetName()
		return nil
	}
	return fmt.Errorf("unknown Shop field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ShopMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.shopping != nil {
		edges = append(edges, shop.EdgeShopping)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ShopMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case shop.EdgeShopping:
		ids := make([]ent.Value, 0, len(m.shopping))
		for id := range m.shopping {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ShopMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedshopping != nil {
		edges = append(edges, shop.EdgeShopping)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ShopMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case shop.EdgeShopping:
		ids := make([]ent.Value, 0, len(m.removedshopping))
		for id := range m.removedshopping {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ShopMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedshopping {
		edges = append(edges, shop.EdgeShopping)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ShopMutation) EdgeCleared(name string) bool {
	switch name {
	case shop.EdgeShopping:
		return m.clearedshopping
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ShopMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Shop unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ShopMutation) ResetEdge(name string) error {
	switch name {
	case shop.EdgeShopping:
		m.ResetShopping()
		return nil
	}
	return fmt.Errorf("unknown Shop edge %s", name)
}

// ShoppingMutation represents an operation that mutates the Shopping nodes in the graph.
type ShoppingMutation struct {
	config
	op            Op
	typ           string
	id            *int
	date          *time.Time
	sum           *int
	addsum        *int
	complete      *bool
	_type         *int
	add_type      *int
	clearedFields map[string]struct{}
	item          map[int]struct{}
	removeditem   map[int]struct{}
	cleareditem   bool
	shop          *int
	clearedshop   bool
	user          *int
	cleareduser   bool
	done          bool
	oldValue      func(context.Context) (*Shopping, error)
	predicates    []predicate.Shopping
}

var _ ent.Mutation = (*ShoppingMutation)(nil)

// shoppingOption allows management of the mutation configuration using functional options.
type shoppingOption func(*ShoppingMutation)

// newShoppingMutation creates new mutation for the Shopping entity.
func newShoppingMutation(c config, op Op, opts ...shoppingOption) *ShoppingMutation {
	m := &ShoppingMutation{
		config:        c,
		op:            op,
		typ:           TypeShopping,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withShoppingID sets the ID field of the mutation.
func withShoppingID(id int) shoppingOption {
	return func(m *ShoppingMutation) {
		var (
			err   error
			once  sync.Once
			value *Shopping
		)
		m.oldValue = func(ctx context.Context) (*Shopping, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Shopping.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withShopping sets the old Shopping of the mutation.
func withShopping(node *Shopping) shoppingOption {
	return func(m *ShoppingMutation) {
		m.oldValue = func(context.Context) (*Shopping, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ShoppingMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ShoppingMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ShoppingMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ShoppingMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Shopping.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetDate sets the "date" field.
func (m *ShoppingMutation) SetDate(t time.Time) {
	m.date = &t
}

// Date returns the value of the "date" field in the mutation.
func (m *ShoppingMutation) Date() (r time.Time, exists bool) {
	v := m.date
	if v == nil {
		return
	}
	return *v, true
}

// OldDate returns the old "date" field's value of the Shopping entity.
// If the Shopping object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ShoppingMutation) OldDate(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDate: %w", err)
	}
	return oldValue.Date, nil
}

// ResetDate resets all changes to the "date" field.
func (m *ShoppingMutation) ResetDate() {
	m.date = nil
}

// SetSum sets the "sum" field.
func (m *ShoppingMutation) SetSum(i int) {
	m.sum = &i
	m.addsum = nil
}

// Sum returns the value of the "sum" field in the mutation.
func (m *ShoppingMutation) Sum() (r int, exists bool) {
	v := m.sum
	if v == nil {
		return
	}
	return *v, true
}

// OldSum returns the old "sum" field's value of the Shopping entity.
// If the Shopping object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ShoppingMutation) OldSum(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSum is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSum requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSum: %w", err)
	}
	return oldValue.Sum, nil
}

// AddSum adds i to the "sum" field.
func (m *ShoppingMutation) AddSum(i int) {
	if m.addsum != nil {
		*m.addsum += i
	} else {
		m.addsum = &i
	}
}

// AddedSum returns the value that was added to the "sum" field in this mutation.
func (m *ShoppingMutation) AddedSum() (r int, exists bool) {
	v := m.addsum
	if v == nil {
		return
	}
	return *v, true
}

// ResetSum resets all changes to the "sum" field.
func (m *ShoppingMutation) ResetSum() {
	m.sum = nil
	m.addsum = nil
}

// SetComplete sets the "complete" field.
func (m *ShoppingMutation) SetComplete(b bool) {
	m.complete = &b
}

// Complete returns the value of the "complete" field in the mutation.
func (m *ShoppingMutation) Complete() (r bool, exists bool) {
	v := m.complete
	if v == nil {
		return
	}
	return *v, true
}

// OldComplete returns the old "complete" field's value of the Shopping entity.
// If the Shopping object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ShoppingMutation) OldComplete(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldComplete is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldComplete requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldComplete: %w", err)
	}
	return oldValue.Complete, nil
}

// ResetComplete resets all changes to the "complete" field.
func (m *ShoppingMutation) ResetComplete() {
	m.complete = nil
}

// SetType sets the "type" field.
func (m *ShoppingMutation) SetType(i int) {
	m._type = &i
	m.add_type = nil
}

// GetType returns the value of the "type" field in the mutation.
func (m *ShoppingMutation) GetType() (r int, exists bool) {
	v := m._type
	if v == nil {
		return
	}
	return *v, true
}

// OldType returns the old "type" field's value of the Shopping entity.
// If the Shopping object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ShoppingMutation) OldType(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldType: %w", err)
	}
	return oldValue.Type, nil
}

// AddType adds i to the "type" field.
func (m *ShoppingMutation) AddType(i int) {
	if m.add_type != nil {
		*m.add_type += i
	} else {
		m.add_type = &i
	}
}

// AddedType returns the value that was added to the "type" field in this mutation.
func (m *ShoppingMutation) AddedType() (r int, exists bool) {
	v := m.add_type
	if v == nil {
		return
	}
	return *v, true
}

// ResetType resets all changes to the "type" field.
func (m *ShoppingMutation) ResetType() {
	m._type = nil
	m.add_type = nil
}

// AddItemIDs adds the "item" edge to the Item entity by ids.
func (m *ShoppingMutation) AddItemIDs(ids ...int) {
	if m.item == nil {
		m.item = make(map[int]struct{})
	}
	for i := range ids {
		m.item[ids[i]] = struct{}{}
	}
}

// ClearItem clears the "item" edge to the Item entity.
func (m *ShoppingMutation) ClearItem() {
	m.cleareditem = true
}

// ItemCleared reports if the "item" edge to the Item entity was cleared.
func (m *ShoppingMutation) ItemCleared() bool {
	return m.cleareditem
}

// RemoveItemIDs removes the "item" edge to the Item entity by IDs.
func (m *ShoppingMutation) RemoveItemIDs(ids ...int) {
	if m.removeditem == nil {
		m.removeditem = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.item, ids[i])
		m.removeditem[ids[i]] = struct{}{}
	}
}

// RemovedItem returns the removed IDs of the "item" edge to the Item entity.
func (m *ShoppingMutation) RemovedItemIDs() (ids []int) {
	for id := range m.removeditem {
		ids = append(ids, id)
	}
	return
}

// ItemIDs returns the "item" edge IDs in the mutation.
func (m *ShoppingMutation) ItemIDs() (ids []int) {
	for id := range m.item {
		ids = append(ids, id)
	}
	return
}

// ResetItem resets all changes to the "item" edge.
func (m *ShoppingMutation) ResetItem() {
	m.item = nil
	m.cleareditem = false
	m.removeditem = nil
}

// SetShopID sets the "shop" edge to the Shop entity by id.
func (m *ShoppingMutation) SetShopID(id int) {
	m.shop = &id
}

// ClearShop clears the "shop" edge to the Shop entity.
func (m *ShoppingMutation) ClearShop() {
	m.clearedshop = true
}

// ShopCleared reports if the "shop" edge to the Shop entity was cleared.
func (m *ShoppingMutation) ShopCleared() bool {
	return m.clearedshop
}

// ShopID returns the "shop" edge ID in the mutation.
func (m *ShoppingMutation) ShopID() (id int, exists bool) {
	if m.shop != nil {
		return *m.shop, true
	}
	return
}

// ShopIDs returns the "shop" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ShopID instead. It exists only for internal usage by the builders.
func (m *ShoppingMutation) ShopIDs() (ids []int) {
	if id := m.shop; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetShop resets all changes to the "shop" edge.
func (m *ShoppingMutation) ResetShop() {
	m.shop = nil
	m.clearedshop = false
}

// SetUserID sets the "user" edge to the User entity by id.
func (m *ShoppingMutation) SetUserID(id int) {
	m.user = &id
}

// ClearUser clears the "user" edge to the User entity.
func (m *ShoppingMutation) ClearUser() {
	m.cleareduser = true
}

// UserCleared reports if the "user" edge to the User entity was cleared.
func (m *ShoppingMutation) UserCleared() bool {
	return m.cleareduser
}

// UserID returns the "user" edge ID in the mutation.
func (m *ShoppingMutation) UserID() (id int, exists bool) {
	if m.user != nil {
		return *m.user, true
	}
	return
}

// UserIDs returns the "user" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UserID instead. It exists only for internal usage by the builders.
func (m *ShoppingMutation) UserIDs() (ids []int) {
	if id := m.user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUser resets all changes to the "user" edge.
func (m *ShoppingMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
}

// Where appends a list predicates to the ShoppingMutation builder.
func (m *ShoppingMutation) Where(ps ...predicate.Shopping) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *ShoppingMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Shopping).
func (m *ShoppingMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ShoppingMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.date != nil {
		fields = append(fields, shopping.FieldDate)
	}
	if m.sum != nil {
		fields = append(fields, shopping.FieldSum)
	}
	if m.complete != nil {
		fields = append(fields, shopping.FieldComplete)
	}
	if m._type != nil {
		fields = append(fields, shopping.FieldType)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ShoppingMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case shopping.FieldDate:
		return m.Date()
	case shopping.FieldSum:
		return m.Sum()
	case shopping.FieldComplete:
		return m.Complete()
	case shopping.FieldType:
		return m.GetType()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ShoppingMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case shopping.FieldDate:
		return m.OldDate(ctx)
	case shopping.FieldSum:
		return m.OldSum(ctx)
	case shopping.FieldComplete:
		return m.OldComplete(ctx)
	case shopping.FieldType:
		return m.OldType(ctx)
	}
	return nil, fmt.Errorf("unknown Shopping field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ShoppingMutation) SetField(name string, value ent.Value) error {
	switch name {
	case shopping.FieldDate:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDate(v)
		return nil
	case shopping.FieldSum:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSum(v)
		return nil
	case shopping.FieldComplete:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetComplete(v)
		return nil
	case shopping.FieldType:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetType(v)
		return nil
	}
	return fmt.Errorf("unknown Shopping field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ShoppingMutation) AddedFields() []string {
	var fields []string
	if m.addsum != nil {
		fields = append(fields, shopping.FieldSum)
	}
	if m.add_type != nil {
		fields = append(fields, shopping.FieldType)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ShoppingMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case shopping.FieldSum:
		return m.AddedSum()
	case shopping.FieldType:
		return m.AddedType()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ShoppingMutation) AddField(name string, value ent.Value) error {
	switch name {
	case shopping.FieldSum:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddSum(v)
		return nil
	case shopping.FieldType:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddType(v)
		return nil
	}
	return fmt.Errorf("unknown Shopping numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ShoppingMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ShoppingMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ShoppingMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Shopping nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ShoppingMutation) ResetField(name string) error {
	switch name {
	case shopping.FieldDate:
		m.ResetDate()
		return nil
	case shopping.FieldSum:
		m.ResetSum()
		return nil
	case shopping.FieldComplete:
		m.ResetComplete()
		return nil
	case shopping.FieldType:
		m.ResetType()
		return nil
	}
	return fmt.Errorf("unknown Shopping field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ShoppingMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.item != nil {
		edges = append(edges, shopping.EdgeItem)
	}
	if m.shop != nil {
		edges = append(edges, shopping.EdgeShop)
	}
	if m.user != nil {
		edges = append(edges, shopping.EdgeUser)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ShoppingMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case shopping.EdgeItem:
		ids := make([]ent.Value, 0, len(m.item))
		for id := range m.item {
			ids = append(ids, id)
		}
		return ids
	case shopping.EdgeShop:
		if id := m.shop; id != nil {
			return []ent.Value{*id}
		}
	case shopping.EdgeUser:
		if id := m.user; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ShoppingMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	if m.removeditem != nil {
		edges = append(edges, shopping.EdgeItem)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ShoppingMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case shopping.EdgeItem:
		ids := make([]ent.Value, 0, len(m.removeditem))
		for id := range m.removeditem {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ShoppingMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.cleareditem {
		edges = append(edges, shopping.EdgeItem)
	}
	if m.clearedshop {
		edges = append(edges, shopping.EdgeShop)
	}
	if m.cleareduser {
		edges = append(edges, shopping.EdgeUser)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ShoppingMutation) EdgeCleared(name string) bool {
	switch name {
	case shopping.EdgeItem:
		return m.cleareditem
	case shopping.EdgeShop:
		return m.clearedshop
	case shopping.EdgeUser:
		return m.cleareduser
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ShoppingMutation) ClearEdge(name string) error {
	switch name {
	case shopping.EdgeShop:
		m.ClearShop()
		return nil
	case shopping.EdgeUser:
		m.ClearUser()
		return nil
	}
	return fmt.Errorf("unknown Shopping unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ShoppingMutation) ResetEdge(name string) error {
	switch name {
	case shopping.EdgeItem:
		m.ResetItem()
		return nil
	case shopping.EdgeShop:
		m.ResetShop()
		return nil
	case shopping.EdgeUser:
		m.ResetUser()
		return nil
	}
	return fmt.Errorf("unknown Shopping edge %s", name)
}

// UserMutation represents an operation that mutates the User nodes in the graph.
type UserMutation struct {
	config
	op                Op
	typ               string
	id                *int
	telegram_id       *int64
	addtelegram_id    *int64
	telegram_username *string
	comunity_id       *string
	token             *string
	chat_id           *int64
	addchat_id        *int64
	clearedFields     map[string]struct{}
	shopping          map[int]struct{}
	removedshopping   map[int]struct{}
	clearedshopping   bool
	done              bool
	oldValue          func(context.Context) (*User, error)
	predicates        []predicate.User
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows management of the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for the User entity.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the ID field of the mutation.
func withUserID(id int) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().User.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetTelegramID sets the "telegram_id" field.
func (m *UserMutation) SetTelegramID(i int64) {
	m.telegram_id = &i
	m.addtelegram_id = nil
}

// TelegramID returns the value of the "telegram_id" field in the mutation.
func (m *UserMutation) TelegramID() (r int64, exists bool) {
	v := m.telegram_id
	if v == nil {
		return
	}
	return *v, true
}

// OldTelegramID returns the old "telegram_id" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldTelegramID(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTelegramID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTelegramID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTelegramID: %w", err)
	}
	return oldValue.TelegramID, nil
}

// AddTelegramID adds i to the "telegram_id" field.
func (m *UserMutation) AddTelegramID(i int64) {
	if m.addtelegram_id != nil {
		*m.addtelegram_id += i
	} else {
		m.addtelegram_id = &i
	}
}

// AddedTelegramID returns the value that was added to the "telegram_id" field in this mutation.
func (m *UserMutation) AddedTelegramID() (r int64, exists bool) {
	v := m.addtelegram_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetTelegramID resets all changes to the "telegram_id" field.
func (m *UserMutation) ResetTelegramID() {
	m.telegram_id = nil
	m.addtelegram_id = nil
}

// SetTelegramUsername sets the "telegram_username" field.
func (m *UserMutation) SetTelegramUsername(s string) {
	m.telegram_username = &s
}

// TelegramUsername returns the value of the "telegram_username" field in the mutation.
func (m *UserMutation) TelegramUsername() (r string, exists bool) {
	v := m.telegram_username
	if v == nil {
		return
	}
	return *v, true
}

// OldTelegramUsername returns the old "telegram_username" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldTelegramUsername(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTelegramUsername is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTelegramUsername requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTelegramUsername: %w", err)
	}
	return oldValue.TelegramUsername, nil
}

// ResetTelegramUsername resets all changes to the "telegram_username" field.
func (m *UserMutation) ResetTelegramUsername() {
	m.telegram_username = nil
}

// SetComunityID sets the "comunity_id" field.
func (m *UserMutation) SetComunityID(s string) {
	m.comunity_id = &s
}

// ComunityID returns the value of the "comunity_id" field in the mutation.
func (m *UserMutation) ComunityID() (r string, exists bool) {
	v := m.comunity_id
	if v == nil {
		return
	}
	return *v, true
}

// OldComunityID returns the old "comunity_id" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldComunityID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldComunityID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldComunityID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldComunityID: %w", err)
	}
	return oldValue.ComunityID, nil
}

// ResetComunityID resets all changes to the "comunity_id" field.
func (m *UserMutation) ResetComunityID() {
	m.comunity_id = nil
}

// SetToken sets the "token" field.
func (m *UserMutation) SetToken(s string) {
	m.token = &s
}

// Token returns the value of the "token" field in the mutation.
func (m *UserMutation) Token() (r string, exists bool) {
	v := m.token
	if v == nil {
		return
	}
	return *v, true
}

// OldToken returns the old "token" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldToken(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldToken is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldToken requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldToken: %w", err)
	}
	return oldValue.Token, nil
}

// ResetToken resets all changes to the "token" field.
func (m *UserMutation) ResetToken() {
	m.token = nil
}

// SetChatID sets the "chat_id" field.
func (m *UserMutation) SetChatID(i int64) {
	m.chat_id = &i
	m.addchat_id = nil
}

// ChatID returns the value of the "chat_id" field in the mutation.
func (m *UserMutation) ChatID() (r int64, exists bool) {
	v := m.chat_id
	if v == nil {
		return
	}
	return *v, true
}

// OldChatID returns the old "chat_id" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldChatID(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldChatID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldChatID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldChatID: %w", err)
	}
	return oldValue.ChatID, nil
}

// AddChatID adds i to the "chat_id" field.
func (m *UserMutation) AddChatID(i int64) {
	if m.addchat_id != nil {
		*m.addchat_id += i
	} else {
		m.addchat_id = &i
	}
}

// AddedChatID returns the value that was added to the "chat_id" field in this mutation.
func (m *UserMutation) AddedChatID() (r int64, exists bool) {
	v := m.addchat_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetChatID resets all changes to the "chat_id" field.
func (m *UserMutation) ResetChatID() {
	m.chat_id = nil
	m.addchat_id = nil
}

// AddShoppingIDs adds the "shopping" edge to the Shopping entity by ids.
func (m *UserMutation) AddShoppingIDs(ids ...int) {
	if m.shopping == nil {
		m.shopping = make(map[int]struct{})
	}
	for i := range ids {
		m.shopping[ids[i]] = struct{}{}
	}
}

// ClearShopping clears the "shopping" edge to the Shopping entity.
func (m *UserMutation) ClearShopping() {
	m.clearedshopping = true
}

// ShoppingCleared reports if the "shopping" edge to the Shopping entity was cleared.
func (m *UserMutation) ShoppingCleared() bool {
	return m.clearedshopping
}

// RemoveShoppingIDs removes the "shopping" edge to the Shopping entity by IDs.
func (m *UserMutation) RemoveShoppingIDs(ids ...int) {
	if m.removedshopping == nil {
		m.removedshopping = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.shopping, ids[i])
		m.removedshopping[ids[i]] = struct{}{}
	}
}

// RemovedShopping returns the removed IDs of the "shopping" edge to the Shopping entity.
func (m *UserMutation) RemovedShoppingIDs() (ids []int) {
	for id := range m.removedshopping {
		ids = append(ids, id)
	}
	return
}

// ShoppingIDs returns the "shopping" edge IDs in the mutation.
func (m *UserMutation) ShoppingIDs() (ids []int) {
	for id := range m.shopping {
		ids = append(ids, id)
	}
	return
}

// ResetShopping resets all changes to the "shopping" edge.
func (m *UserMutation) ResetShopping() {
	m.shopping = nil
	m.clearedshopping = false
	m.removedshopping = nil
}

// Where appends a list predicates to the UserMutation builder.
func (m *UserMutation) Where(ps ...predicate.User) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.telegram_id != nil {
		fields = append(fields, user.FieldTelegramID)
	}
	if m.telegram_username != nil {
		fields = append(fields, user.FieldTelegramUsername)
	}
	if m.comunity_id != nil {
		fields = append(fields, user.FieldComunityID)
	}
	if m.token != nil {
		fields = append(fields, user.FieldToken)
	}
	if m.chat_id != nil {
		fields = append(fields, user.FieldChatID)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case user.FieldTelegramID:
		return m.TelegramID()
	case user.FieldTelegramUsername:
		return m.TelegramUsername()
	case user.FieldComunityID:
		return m.ComunityID()
	case user.FieldToken:
		return m.Token()
	case user.FieldChatID:
		return m.ChatID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case user.FieldTelegramID:
		return m.OldTelegramID(ctx)
	case user.FieldTelegramUsername:
		return m.OldTelegramUsername(ctx)
	case user.FieldComunityID:
		return m.OldComunityID(ctx)
	case user.FieldToken:
		return m.OldToken(ctx)
	case user.FieldChatID:
		return m.OldChatID(ctx)
	}
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case user.FieldTelegramID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTelegramID(v)
		return nil
	case user.FieldTelegramUsername:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTelegramUsername(v)
		return nil
	case user.FieldComunityID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetComunityID(v)
		return nil
	case user.FieldToken:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetToken(v)
		return nil
	case user.FieldChatID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetChatID(v)
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserMutation) AddedFields() []string {
	var fields []string
	if m.addtelegram_id != nil {
		fields = append(fields, user.FieldTelegramID)
	}
	if m.addchat_id != nil {
		fields = append(fields, user.FieldChatID)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case user.FieldTelegramID:
		return m.AddedTelegramID()
	case user.FieldChatID:
		return m.AddedChatID()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	case user.FieldTelegramID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddTelegramID(v)
		return nil
	case user.FieldChatID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddChatID(v)
		return nil
	}
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	switch name {
	case user.FieldTelegramID:
		m.ResetTelegramID()
		return nil
	case user.FieldTelegramUsername:
		m.ResetTelegramUsername()
		return nil
	case user.FieldComunityID:
		m.ResetComunityID()
		return nil
	case user.FieldToken:
		m.ResetToken()
		return nil
	case user.FieldChatID:
		m.ResetChatID()
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.shopping != nil {
		edges = append(edges, user.EdgeShopping)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeShopping:
		ids := make([]ent.Value, 0, len(m.shopping))
		for id := range m.shopping {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedshopping != nil {
		edges = append(edges, user.EdgeShopping)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeShopping:
		ids := make([]ent.Value, 0, len(m.removedshopping))
		for id := range m.removedshopping {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedshopping {
		edges = append(edges, user.EdgeShopping)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	switch name {
	case user.EdgeShopping:
		return m.clearedshopping
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	switch name {
	case user.EdgeShopping:
		m.ResetShopping()
		return nil
	}
	return fmt.Errorf("unknown User edge %s", name)
}
