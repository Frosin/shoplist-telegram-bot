// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Frosin/shoplist-telegram-bot/internal/shoplist/ent/item"
	"github.com/Frosin/shoplist-telegram-bot/internal/shoplist/ent/shop"
	"github.com/Frosin/shoplist-telegram-bot/internal/shoplist/ent/shopping"
	"github.com/Frosin/shoplist-telegram-bot/internal/shoplist/ent/user"
)

// ShoppingCreate is the builder for creating a Shopping entity.
type ShoppingCreate struct {
	config
	mutation *ShoppingMutation
	hooks    []Hook
}

// SetDate sets the "date" field.
func (sc *ShoppingCreate) SetDate(t time.Time) *ShoppingCreate {
	sc.mutation.SetDate(t)
	return sc
}

// SetNillableDate sets the "date" field if the given value is not nil.
func (sc *ShoppingCreate) SetNillableDate(t *time.Time) *ShoppingCreate {
	if t != nil {
		sc.SetDate(*t)
	}
	return sc
}

// SetSum sets the "sum" field.
func (sc *ShoppingCreate) SetSum(i int) *ShoppingCreate {
	sc.mutation.SetSum(i)
	return sc
}

// SetNillableSum sets the "sum" field if the given value is not nil.
func (sc *ShoppingCreate) SetNillableSum(i *int) *ShoppingCreate {
	if i != nil {
		sc.SetSum(*i)
	}
	return sc
}

// SetComplete sets the "complete" field.
func (sc *ShoppingCreate) SetComplete(b bool) *ShoppingCreate {
	sc.mutation.SetComplete(b)
	return sc
}

// SetNillableComplete sets the "complete" field if the given value is not nil.
func (sc *ShoppingCreate) SetNillableComplete(b *bool) *ShoppingCreate {
	if b != nil {
		sc.SetComplete(*b)
	}
	return sc
}

// SetType sets the "type" field.
func (sc *ShoppingCreate) SetType(i int) *ShoppingCreate {
	sc.mutation.SetType(i)
	return sc
}

// SetNillableType sets the "type" field if the given value is not nil.
func (sc *ShoppingCreate) SetNillableType(i *int) *ShoppingCreate {
	if i != nil {
		sc.SetType(*i)
	}
	return sc
}

// AddItemIDs adds the "item" edge to the Item entity by IDs.
func (sc *ShoppingCreate) AddItemIDs(ids ...int) *ShoppingCreate {
	sc.mutation.AddItemIDs(ids...)
	return sc
}

// AddItem adds the "item" edges to the Item entity.
func (sc *ShoppingCreate) AddItem(i ...*Item) *ShoppingCreate {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return sc.AddItemIDs(ids...)
}

// SetShopID sets the "shop" edge to the Shop entity by ID.
func (sc *ShoppingCreate) SetShopID(id int) *ShoppingCreate {
	sc.mutation.SetShopID(id)
	return sc
}

// SetNillableShopID sets the "shop" edge to the Shop entity by ID if the given value is not nil.
func (sc *ShoppingCreate) SetNillableShopID(id *int) *ShoppingCreate {
	if id != nil {
		sc = sc.SetShopID(*id)
	}
	return sc
}

// SetShop sets the "shop" edge to the Shop entity.
func (sc *ShoppingCreate) SetShop(s *Shop) *ShoppingCreate {
	return sc.SetShopID(s.ID)
}

// SetUserID sets the "user" edge to the User entity by ID.
func (sc *ShoppingCreate) SetUserID(id int) *ShoppingCreate {
	sc.mutation.SetUserID(id)
	return sc
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (sc *ShoppingCreate) SetNillableUserID(id *int) *ShoppingCreate {
	if id != nil {
		sc = sc.SetUserID(*id)
	}
	return sc
}

// SetUser sets the "user" edge to the User entity.
func (sc *ShoppingCreate) SetUser(u *User) *ShoppingCreate {
	return sc.SetUserID(u.ID)
}

// Mutation returns the ShoppingMutation object of the builder.
func (sc *ShoppingCreate) Mutation() *ShoppingMutation {
	return sc.mutation
}

// Save creates the Shopping in the database.
func (sc *ShoppingCreate) Save(ctx context.Context) (*Shopping, error) {
	var (
		err  error
		node *Shopping
	)
	sc.defaults()
	if len(sc.hooks) == 0 {
		if err = sc.check(); err != nil {
			return nil, err
		}
		node, err = sc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ShoppingMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = sc.check(); err != nil {
				return nil, err
			}
			sc.mutation = mutation
			if node, err = sc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(sc.hooks) - 1; i >= 0; i-- {
			if sc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = sc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, sc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Shopping)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from ShoppingMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (sc *ShoppingCreate) SaveX(ctx context.Context) *Shopping {
	v, err := sc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sc *ShoppingCreate) Exec(ctx context.Context) error {
	_, err := sc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sc *ShoppingCreate) ExecX(ctx context.Context) {
	if err := sc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sc *ShoppingCreate) defaults() {
	if _, ok := sc.mutation.Date(); !ok {
		v := shopping.DefaultDate()
		sc.mutation.SetDate(v)
	}
	if _, ok := sc.mutation.Sum(); !ok {
		v := shopping.DefaultSum
		sc.mutation.SetSum(v)
	}
	if _, ok := sc.mutation.Complete(); !ok {
		v := shopping.DefaultComplete
		sc.mutation.SetComplete(v)
	}
	if _, ok := sc.mutation.GetType(); !ok {
		v := shopping.DefaultType
		sc.mutation.SetType(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sc *ShoppingCreate) check() error {
	if _, ok := sc.mutation.Date(); !ok {
		return &ValidationError{Name: "date", err: errors.New(`ent: missing required field "Shopping.date"`)}
	}
	if _, ok := sc.mutation.Sum(); !ok {
		return &ValidationError{Name: "sum", err: errors.New(`ent: missing required field "Shopping.sum"`)}
	}
	if _, ok := sc.mutation.Complete(); !ok {
		return &ValidationError{Name: "complete", err: errors.New(`ent: missing required field "Shopping.complete"`)}
	}
	if _, ok := sc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "Shopping.type"`)}
	}
	return nil
}

func (sc *ShoppingCreate) sqlSave(ctx context.Context) (*Shopping, error) {
	_node, _spec := sc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (sc *ShoppingCreate) createSpec() (*Shopping, *sqlgraph.CreateSpec) {
	var (
		_node = &Shopping{config: sc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: shopping.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: shopping.FieldID,
			},
		}
	)
	if value, ok := sc.mutation.Date(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: shopping.FieldDate,
		})
		_node.Date = value
	}
	if value, ok := sc.mutation.Sum(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: shopping.FieldSum,
		})
		_node.Sum = value
	}
	if value, ok := sc.mutation.Complete(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: shopping.FieldComplete,
		})
		_node.Complete = value
	}
	if value, ok := sc.mutation.GetType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: shopping.FieldType,
		})
		_node.Type = value
	}
	if nodes := sc.mutation.ItemIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   shopping.ItemTable,
			Columns: []string{shopping.ItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: item.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sc.mutation.ShopIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   shopping.ShopTable,
			Columns: []string{shopping.ShopColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: shop.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.shop_shopping = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   shopping.UserTable,
			Columns: []string{shopping.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_shopping = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ShoppingCreateBulk is the builder for creating many Shopping entities in bulk.
type ShoppingCreateBulk struct {
	config
	builders []*ShoppingCreate
}

// Save creates the Shopping entities in the database.
func (scb *ShoppingCreateBulk) Save(ctx context.Context) ([]*Shopping, error) {
	specs := make([]*sqlgraph.CreateSpec, len(scb.builders))
	nodes := make([]*Shopping, len(scb.builders))
	mutators := make([]Mutator, len(scb.builders))
	for i := range scb.builders {
		func(i int, root context.Context) {
			builder := scb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ShoppingMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, scb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, scb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, scb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (scb *ShoppingCreateBulk) SaveX(ctx context.Context) []*Shopping {
	v, err := scb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (scb *ShoppingCreateBulk) Exec(ctx context.Context) error {
	_, err := scb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scb *ShoppingCreateBulk) ExecX(ctx context.Context) {
	if err := scb.Exec(ctx); err != nil {
		panic(err)
	}
}
