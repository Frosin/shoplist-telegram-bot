// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Frosin/shoplist-telegram-bot/internal/shoplist/ent/item"
	"github.com/Frosin/shoplist-telegram-bot/internal/shoplist/ent/predicate"
	"github.com/Frosin/shoplist-telegram-bot/internal/shoplist/ent/shop"
	"github.com/Frosin/shoplist-telegram-bot/internal/shoplist/ent/shopping"
	"github.com/Frosin/shoplist-telegram-bot/internal/shoplist/ent/user"
)

// ShoppingUpdate is the builder for updating Shopping entities.
type ShoppingUpdate struct {
	config
	hooks    []Hook
	mutation *ShoppingMutation
}

// Where appends a list predicates to the ShoppingUpdate builder.
func (su *ShoppingUpdate) Where(ps ...predicate.Shopping) *ShoppingUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetDate sets the "date" field.
func (su *ShoppingUpdate) SetDate(t time.Time) *ShoppingUpdate {
	su.mutation.SetDate(t)
	return su
}

// SetNillableDate sets the "date" field if the given value is not nil.
func (su *ShoppingUpdate) SetNillableDate(t *time.Time) *ShoppingUpdate {
	if t != nil {
		su.SetDate(*t)
	}
	return su
}

// SetSum sets the "sum" field.
func (su *ShoppingUpdate) SetSum(i int) *ShoppingUpdate {
	su.mutation.ResetSum()
	su.mutation.SetSum(i)
	return su
}

// SetNillableSum sets the "sum" field if the given value is not nil.
func (su *ShoppingUpdate) SetNillableSum(i *int) *ShoppingUpdate {
	if i != nil {
		su.SetSum(*i)
	}
	return su
}

// AddSum adds i to the "sum" field.
func (su *ShoppingUpdate) AddSum(i int) *ShoppingUpdate {
	su.mutation.AddSum(i)
	return su
}

// SetComplete sets the "complete" field.
func (su *ShoppingUpdate) SetComplete(b bool) *ShoppingUpdate {
	su.mutation.SetComplete(b)
	return su
}

// SetNillableComplete sets the "complete" field if the given value is not nil.
func (su *ShoppingUpdate) SetNillableComplete(b *bool) *ShoppingUpdate {
	if b != nil {
		su.SetComplete(*b)
	}
	return su
}

// SetType sets the "type" field.
func (su *ShoppingUpdate) SetType(i int) *ShoppingUpdate {
	su.mutation.ResetType()
	su.mutation.SetType(i)
	return su
}

// SetNillableType sets the "type" field if the given value is not nil.
func (su *ShoppingUpdate) SetNillableType(i *int) *ShoppingUpdate {
	if i != nil {
		su.SetType(*i)
	}
	return su
}

// AddType adds i to the "type" field.
func (su *ShoppingUpdate) AddType(i int) *ShoppingUpdate {
	su.mutation.AddType(i)
	return su
}

// AddItemIDs adds the "item" edge to the Item entity by IDs.
func (su *ShoppingUpdate) AddItemIDs(ids ...int) *ShoppingUpdate {
	su.mutation.AddItemIDs(ids...)
	return su
}

// AddItem adds the "item" edges to the Item entity.
func (su *ShoppingUpdate) AddItem(i ...*Item) *ShoppingUpdate {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return su.AddItemIDs(ids...)
}

// SetShopID sets the "shop" edge to the Shop entity by ID.
func (su *ShoppingUpdate) SetShopID(id int) *ShoppingUpdate {
	su.mutation.SetShopID(id)
	return su
}

// SetNillableShopID sets the "shop" edge to the Shop entity by ID if the given value is not nil.
func (su *ShoppingUpdate) SetNillableShopID(id *int) *ShoppingUpdate {
	if id != nil {
		su = su.SetShopID(*id)
	}
	return su
}

// SetShop sets the "shop" edge to the Shop entity.
func (su *ShoppingUpdate) SetShop(s *Shop) *ShoppingUpdate {
	return su.SetShopID(s.ID)
}

// SetUserID sets the "user" edge to the User entity by ID.
func (su *ShoppingUpdate) SetUserID(id int) *ShoppingUpdate {
	su.mutation.SetUserID(id)
	return su
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (su *ShoppingUpdate) SetNillableUserID(id *int) *ShoppingUpdate {
	if id != nil {
		su = su.SetUserID(*id)
	}
	return su
}

// SetUser sets the "user" edge to the User entity.
func (su *ShoppingUpdate) SetUser(u *User) *ShoppingUpdate {
	return su.SetUserID(u.ID)
}

// Mutation returns the ShoppingMutation object of the builder.
func (su *ShoppingUpdate) Mutation() *ShoppingMutation {
	return su.mutation
}

// ClearItem clears all "item" edges to the Item entity.
func (su *ShoppingUpdate) ClearItem() *ShoppingUpdate {
	su.mutation.ClearItem()
	return su
}

// RemoveItemIDs removes the "item" edge to Item entities by IDs.
func (su *ShoppingUpdate) RemoveItemIDs(ids ...int) *ShoppingUpdate {
	su.mutation.RemoveItemIDs(ids...)
	return su
}

// RemoveItem removes "item" edges to Item entities.
func (su *ShoppingUpdate) RemoveItem(i ...*Item) *ShoppingUpdate {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return su.RemoveItemIDs(ids...)
}

// ClearShop clears the "shop" edge to the Shop entity.
func (su *ShoppingUpdate) ClearShop() *ShoppingUpdate {
	su.mutation.ClearShop()
	return su
}

// ClearUser clears the "user" edge to the User entity.
func (su *ShoppingUpdate) ClearUser() *ShoppingUpdate {
	su.mutation.ClearUser()
	return su
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *ShoppingUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(su.hooks) == 0 {
		affected, err = su.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ShoppingMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			su.mutation = mutation
			affected, err = su.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(su.hooks) - 1; i >= 0; i-- {
			if su.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = su.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, su.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (su *ShoppingUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *ShoppingUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *ShoppingUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

func (su *ShoppingUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   shopping.Table,
			Columns: shopping.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: shopping.FieldID,
			},
		},
	}
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.Date(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: shopping.FieldDate,
		})
	}
	if value, ok := su.mutation.Sum(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: shopping.FieldSum,
		})
	}
	if value, ok := su.mutation.AddedSum(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: shopping.FieldSum,
		})
	}
	if value, ok := su.mutation.Complete(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: shopping.FieldComplete,
		})
	}
	if value, ok := su.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: shopping.FieldType,
		})
	}
	if value, ok := su.mutation.AddedType(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: shopping.FieldType,
		})
	}
	if su.mutation.ItemCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   shopping.ItemTable,
			Columns: []string{shopping.ItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: item.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedItemIDs(); len(nodes) > 0 && !su.mutation.ItemCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   shopping.ItemTable,
			Columns: []string{shopping.ItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: item.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.ItemIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   shopping.ItemTable,
			Columns: []string{shopping.ItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: item.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.ShopCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   shopping.ShopTable,
			Columns: []string{shopping.ShopColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: shop.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.ShopIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   shopping.ShopTable,
			Columns: []string{shopping.ShopColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: shop.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   shopping.UserTable,
			Columns: []string{shopping.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   shopping.UserTable,
			Columns: []string{shopping.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{shopping.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// ShoppingUpdateOne is the builder for updating a single Shopping entity.
type ShoppingUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ShoppingMutation
}

// SetDate sets the "date" field.
func (suo *ShoppingUpdateOne) SetDate(t time.Time) *ShoppingUpdateOne {
	suo.mutation.SetDate(t)
	return suo
}

// SetNillableDate sets the "date" field if the given value is not nil.
func (suo *ShoppingUpdateOne) SetNillableDate(t *time.Time) *ShoppingUpdateOne {
	if t != nil {
		suo.SetDate(*t)
	}
	return suo
}

// SetSum sets the "sum" field.
func (suo *ShoppingUpdateOne) SetSum(i int) *ShoppingUpdateOne {
	suo.mutation.ResetSum()
	suo.mutation.SetSum(i)
	return suo
}

// SetNillableSum sets the "sum" field if the given value is not nil.
func (suo *ShoppingUpdateOne) SetNillableSum(i *int) *ShoppingUpdateOne {
	if i != nil {
		suo.SetSum(*i)
	}
	return suo
}

// AddSum adds i to the "sum" field.
func (suo *ShoppingUpdateOne) AddSum(i int) *ShoppingUpdateOne {
	suo.mutation.AddSum(i)
	return suo
}

// SetComplete sets the "complete" field.
func (suo *ShoppingUpdateOne) SetComplete(b bool) *ShoppingUpdateOne {
	suo.mutation.SetComplete(b)
	return suo
}

// SetNillableComplete sets the "complete" field if the given value is not nil.
func (suo *ShoppingUpdateOne) SetNillableComplete(b *bool) *ShoppingUpdateOne {
	if b != nil {
		suo.SetComplete(*b)
	}
	return suo
}

// SetType sets the "type" field.
func (suo *ShoppingUpdateOne) SetType(i int) *ShoppingUpdateOne {
	suo.mutation.ResetType()
	suo.mutation.SetType(i)
	return suo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (suo *ShoppingUpdateOne) SetNillableType(i *int) *ShoppingUpdateOne {
	if i != nil {
		suo.SetType(*i)
	}
	return suo
}

// AddType adds i to the "type" field.
func (suo *ShoppingUpdateOne) AddType(i int) *ShoppingUpdateOne {
	suo.mutation.AddType(i)
	return suo
}

// AddItemIDs adds the "item" edge to the Item entity by IDs.
func (suo *ShoppingUpdateOne) AddItemIDs(ids ...int) *ShoppingUpdateOne {
	suo.mutation.AddItemIDs(ids...)
	return suo
}

// AddItem adds the "item" edges to the Item entity.
func (suo *ShoppingUpdateOne) AddItem(i ...*Item) *ShoppingUpdateOne {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return suo.AddItemIDs(ids...)
}

// SetShopID sets the "shop" edge to the Shop entity by ID.
func (suo *ShoppingUpdateOne) SetShopID(id int) *ShoppingUpdateOne {
	suo.mutation.SetShopID(id)
	return suo
}

// SetNillableShopID sets the "shop" edge to the Shop entity by ID if the given value is not nil.
func (suo *ShoppingUpdateOne) SetNillableShopID(id *int) *ShoppingUpdateOne {
	if id != nil {
		suo = suo.SetShopID(*id)
	}
	return suo
}

// SetShop sets the "shop" edge to the Shop entity.
func (suo *ShoppingUpdateOne) SetShop(s *Shop) *ShoppingUpdateOne {
	return suo.SetShopID(s.ID)
}

// SetUserID sets the "user" edge to the User entity by ID.
func (suo *ShoppingUpdateOne) SetUserID(id int) *ShoppingUpdateOne {
	suo.mutation.SetUserID(id)
	return suo
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (suo *ShoppingUpdateOne) SetNillableUserID(id *int) *ShoppingUpdateOne {
	if id != nil {
		suo = suo.SetUserID(*id)
	}
	return suo
}

// SetUser sets the "user" edge to the User entity.
func (suo *ShoppingUpdateOne) SetUser(u *User) *ShoppingUpdateOne {
	return suo.SetUserID(u.ID)
}

// Mutation returns the ShoppingMutation object of the builder.
func (suo *ShoppingUpdateOne) Mutation() *ShoppingMutation {
	return suo.mutation
}

// ClearItem clears all "item" edges to the Item entity.
func (suo *ShoppingUpdateOne) ClearItem() *ShoppingUpdateOne {
	suo.mutation.ClearItem()
	return suo
}

// RemoveItemIDs removes the "item" edge to Item entities by IDs.
func (suo *ShoppingUpdateOne) RemoveItemIDs(ids ...int) *ShoppingUpdateOne {
	suo.mutation.RemoveItemIDs(ids...)
	return suo
}

// RemoveItem removes "item" edges to Item entities.
func (suo *ShoppingUpdateOne) RemoveItem(i ...*Item) *ShoppingUpdateOne {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return suo.RemoveItemIDs(ids...)
}

// ClearShop clears the "shop" edge to the Shop entity.
func (suo *ShoppingUpdateOne) ClearShop() *ShoppingUpdateOne {
	suo.mutation.ClearShop()
	return suo
}

// ClearUser clears the "user" edge to the User entity.
func (suo *ShoppingUpdateOne) ClearUser() *ShoppingUpdateOne {
	suo.mutation.ClearUser()
	return suo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *ShoppingUpdateOne) Select(field string, fields ...string) *ShoppingUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated Shopping entity.
func (suo *ShoppingUpdateOne) Save(ctx context.Context) (*Shopping, error) {
	var (
		err  error
		node *Shopping
	)
	if len(suo.hooks) == 0 {
		node, err = suo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ShoppingMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			suo.mutation = mutation
			node, err = suo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(suo.hooks) - 1; i >= 0; i-- {
			if suo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = suo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, suo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Shopping)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from ShoppingMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (suo *ShoppingUpdateOne) SaveX(ctx context.Context) *Shopping {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *ShoppingUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *ShoppingUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (suo *ShoppingUpdateOne) sqlSave(ctx context.Context) (_node *Shopping, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   shopping.Table,
			Columns: shopping.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: shopping.FieldID,
			},
		},
	}
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Shopping.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, shopping.FieldID)
		for _, f := range fields {
			if !shopping.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != shopping.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.Date(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: shopping.FieldDate,
		})
	}
	if value, ok := suo.mutation.Sum(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: shopping.FieldSum,
		})
	}
	if value, ok := suo.mutation.AddedSum(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: shopping.FieldSum,
		})
	}
	if value, ok := suo.mutation.Complete(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: shopping.FieldComplete,
		})
	}
	if value, ok := suo.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: shopping.FieldType,
		})
	}
	if value, ok := suo.mutation.AddedType(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: shopping.FieldType,
		})
	}
	if suo.mutation.ItemCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   shopping.ItemTable,
			Columns: []string{shopping.ItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: item.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedItemIDs(); len(nodes) > 0 && !suo.mutation.ItemCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   shopping.ItemTable,
			Columns: []string{shopping.ItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: item.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.ItemIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   shopping.ItemTable,
			Columns: []string{shopping.ItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: item.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.ShopCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   shopping.ShopTable,
			Columns: []string{shopping.ShopColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: shop.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.ShopIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   shopping.ShopTable,
			Columns: []string{shopping.ShopColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: shop.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   shopping.UserTable,
			Columns: []string{shopping.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   shopping.UserTable,
			Columns: []string{shopping.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Shopping{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{shopping.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
